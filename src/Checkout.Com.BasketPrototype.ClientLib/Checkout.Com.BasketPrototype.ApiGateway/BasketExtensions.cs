// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Checkout.Com.BasketPrototype.ClientLib
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Basket.
    /// </summary>
    public static partial class BasketExtensions
    {
            /// <summary>
            /// Create Basket For User.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userGuid'>
            /// The users unique identifier.
            /// </param>
            public static Guid? PostBasketAsync(this IBasket operations, Guid userGuid)
            {
                return Task.Factory.StartNew(s => ((IBasket)s).PostBasketAsyncAsync(userGuid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Basket For User.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userGuid'>
            /// The users unique identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Guid?> PostBasketAsyncAsync(this IBasket operations, Guid userGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostBasketAsyncWithHttpMessagesAsync(userGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the basket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='basketGuid'>
            /// The basket unique identifier.
            /// </param>
            /// <param name='userGuid'>
            /// </param>
            public static void DeleteBasketAsync(this IBasket operations, Guid basketGuid, string userGuid)
            {
                Task.Factory.StartNew(s => ((IBasket)s).DeleteBasketAsyncAsync(basketGuid, userGuid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the basket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='basketGuid'>
            /// The basket unique identifier.
            /// </param>
            /// <param name='userGuid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBasketAsyncAsync(this IBasket operations, Guid basketGuid, string userGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBasketAsyncWithHttpMessagesAsync(basketGuid, userGuid, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
